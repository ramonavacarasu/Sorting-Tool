type: edu
custom_name: stage4
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {

        static Scanner scanner = new Scanner(System.in);

        static ArrayList<String> listWords = new ArrayList<>();
        static ArrayList<String> listLines = new ArrayList<>();
        static ArrayList<Integer> listInt = new ArrayList<>();

        static Map<String, Integer> mapWords = new HashMap<>();
        static Map<String, Integer> mapLines = new HashMap<>();

        static boolean switchTrue = false;

        public static void main(final String[] args) {

            String type = "";

            for (String arg : args) {
                if (arg.equals("-sortIntegers")) {
                    addToListInt();
                    outputSortedData();
                    return;
                } else if (args[0].equals("-dataType")) {
                    switchTrue = true;
                    type = args[1];
                }
            }

            if (switchTrue) {
                switch (type) {
                    case "long":
                        addToListInt();
                        argInt();
                        break;
                    case "line":
                        addToListLines();
                        argLine();
                        break;
                    case "word":
                        addToListWords();
                        argWord();
                        break;
                }
            }
        }

        public static void outputSortedData() {
            System.out.println("Total numbers: " + listInt.size() + ".");
            Collections.sort(listInt);
            StringBuilder sb = new StringBuilder();
            for (int z : listInt) {
                sb.append(z).append(" ");
            }
            System.out.println("Sorted data: " + sb.toString());
        }

        public static void addToListInt() {
            while (scanner.hasNext()) {
                int nextNumber = scanner.nextInt();
                listInt.add(nextNumber);
            }
        }

        public static void addToListLines() {
            while (scanner.hasNext()) {
                String string = scanner.nextLine();
                listLines.add(string);
            }
        }

        public static void addToListWords() {
            while (scanner.hasNext()) {
                String string = scanner.next();
                listWords.add(string);
            }
        }

        public static void argInt() {

            System.out.println("Total numbers: " + listInt.size() + ".");

            int max = 0;
            for (int z : listInt) {
                if (max < z) {
                    max = z;
                }
            }

            int count = 0;
            for (int z : listInt) {
                if (max == z) {
                    count++;
                }
            }

            int percOccurence = 100 * count / listInt.size();

            System.out.println("The greatest number: " + max + "(" + count
                    + " time(s), " + percOccurence + "%).");

        }

        public static void argLine() {

            System.out.println("Total lines: " + listLines.size() + ".");

            for (String str : listLines) {
                mapLines.put(str, str.length());
            }

            int max = 0;
            for (int y : mapLines.values()) {
                if (max < y) {
                    max = y;
                }
            }

            ArrayList<String> strMax = new ArrayList<>();
            for (String z : mapLines.keySet()) {
                if (mapLines.get(z).equals(max)) {
                    strMax.add(z);
                }
            }

            int percOccurence = 100 * strMax.size() / listLines.size();

            System.out.println("The longest line:\n" + strMax.get(0));
            System.out.println("(" + strMax.size() + " time(s), " + percOccurence + "%).");

        }

        public static void argWord() {

            System.out.println("Total words: " + listWords.size() + ".");

            for (String str : listWords) {
                mapWords.put(str, str.length());
            }

            int max = 0;
            for (int y : mapWords.values()) {
                if (max < y) {
                    max = y;
                }
            }

            ArrayList<String> strMax = new ArrayList<>();
            for (String z : mapWords.keySet()) {
                if (mapWords.get(z).equals(max)) {
                    strMax.add(z);
                }
            }

            int percOccurence = 100 * strMax.size() / listWords.size();
            System.out.println("The longest word: " + strMax.get(0) + " ("
                    + strMax.size() + " time(s), " + percOccurence + "%).");

        }
    }
  learner_created: false
- name: test/SortingTest.java
  visible: false
  text: |
    import common.SortingToolStage4Test;

    public class SortingTest extends SortingToolStage4Test {

    }
  learner_created: false
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import sorting.Main
    import java.util.*

    abstract class SortingToolStage4Test : StageTest<SortingToolClue>(Main::class.java) {

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
feedback_link: https://hyperskill.org/projects/45/stages/242/implement#comment
status: Solved
record: 3
